package rarch_parser

// Code generated by gopeg -strict parser/parse.peg DO NOT EDIT.

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleProgram
	ruleDirective
	ruleStatement
	ruleInstruction
	ruleLabel
	ruleArguments
	ruleArgument
	ruleRegister
	ruleImmediate
	ruleHexNumber
	ruleDecimalNumber
	ruleEOF
	ruleIdentifier
	ruleIdentStart
	ruleCChar
)

var rul3s = [...]string{
	"Unknown",
	"Program",
	"Directive",
	"Statement",
	"Instruction",
	"Label",
	"Arguments",
	"Argument",
	"Register",
	"Immediate",
	"HexNumber",
	"DecimalNumber",
	"EOF",
	"Identifier",
	"IdentStart",
	"CChar",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Buffer         string
	buffer         []rune
	rules          [16]func() bool
	parse          func(rule ...int) error
	reset          func()
	Pretty         bool
	disableMemoize bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var b bytes.Buffer
	p.WriteSyntaxTree(&b)
	return b.String()
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}

func DisableMemoize() func(*Parser) error {
	return func(p *Parser) error {
		p.disableMemoize = true
		return nil
	}
}

type memo struct {
	Matched bool
	Partial []token32
}

type memoKey struct {
	Rule     uint32
	Position uint32
}

func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
		memoization          map[memoKey]memo
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0
		memoization = make(map[memoKey]memo)
		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	memoize := func(rule uint32, begin uint32, tokenIndexStart uint32, matched bool) {
		if p.disableMemoize {
			return
		}
		key := memoKey{rule, begin}
		if !matched {
			memoization[key] = memo{Matched: false}
		} else {
			t := tree.tree[tokenIndexStart:tokenIndex]
			tokenCopy := make([]token32, len(t))
			copy(tokenCopy, t)
			memoization[key] = memo{Matched: true, Partial: tokenCopy}
		}
	}

	memoizedResult := func(m memo) bool {
		if !m.Matched {
			return false
		}
		tree.tree = append(tree.tree[:tokenIndex], m.Partial...)
		tokenIndex += uint32(len(m.Partial))
		position = m.Partial[len(m.Partial)-1].end
		if tree.tree[tokenIndex-1].begin != position && position > max.end {
			max = tree.tree[tokenIndex-1]
		}
		return true
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Program <- <((Directive / Statement)* EOF)> */
		func() bool {
			if memoized, ok := memoization[memoKey{0, position}]; ok {
				return memoizedResult(memoized)
			}
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position4, tokenIndex4 := position, tokenIndex
						if !_rules[ruleDirective]() {
							goto l5
						}
						goto l4
					l5:
						position, tokenIndex = position4, tokenIndex4
						if !_rules[ruleStatement]() {
							goto l3
						}
					}
				l4:
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[ruleEOF]() {
					goto l0
				}
				add(ruleProgram, position1)
			}
			memoize(0, position0, tokenIndex0, true)
			return true
		l0:
			memoize(0, position0, tokenIndex0, false)
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Directive <- <((' ' / '\t')* '.' Identifier (' ' / '\t')* Arguments? (' ' / '\t')* '\n')> */
		func() bool {
			if memoized, ok := memoization[memoKey{1, position}]; ok {
				return memoizedResult(memoized)
			}
			position6, tokenIndex6 := position, tokenIndex
			{
				position7 := position
			l8:
				{
					position9, tokenIndex9 := position, tokenIndex
					{
						position10, tokenIndex10 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l11
						}
						position++
						goto l10
					l11:
						position, tokenIndex = position10, tokenIndex10
						if buffer[position] != rune('\t') {
							goto l9
						}
						position++
					}
				l10:
					goto l8
				l9:
					position, tokenIndex = position9, tokenIndex9
				}
				if buffer[position] != rune('.') {
					goto l6
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l6
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					{
						position14, tokenIndex14 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l15
						}
						position++
						goto l14
					l15:
						position, tokenIndex = position14, tokenIndex14
						if buffer[position] != rune('\t') {
							goto l13
						}
						position++
					}
				l14:
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				{
					position16, tokenIndex16 := position, tokenIndex
					if !_rules[ruleArguments]() {
						goto l16
					}
					goto l17
				l16:
					position, tokenIndex = position16, tokenIndex16
				}
			l17:
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					{
						position20, tokenIndex20 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l21
						}
						position++
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if buffer[position] != rune('\t') {
							goto l19
						}
						position++
					}
				l20:
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
				if buffer[position] != rune('\n') {
					goto l6
				}
				position++
				add(ruleDirective, position7)
			}
			memoize(1, position6, tokenIndex6, true)
			return true
		l6:
			memoize(1, position6, tokenIndex6, false)
			position, tokenIndex = position6, tokenIndex6
			return false
		},
		/* 2 Statement <- <((' ' / '\t')* Label? Instruction? (' ' / '\t')* '\n')> */
		func() bool {
			if memoized, ok := memoization[memoKey{2, position}]; ok {
				return memoizedResult(memoized)
			}
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
			l24:
				{
					position25, tokenIndex25 := position, tokenIndex
					{
						position26, tokenIndex26 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l27
						}
						position++
						goto l26
					l27:
						position, tokenIndex = position26, tokenIndex26
						if buffer[position] != rune('\t') {
							goto l25
						}
						position++
					}
				l26:
					goto l24
				l25:
					position, tokenIndex = position25, tokenIndex25
				}
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[ruleLabel]() {
						goto l28
					}
					goto l29
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[ruleInstruction]() {
						goto l30
					}
					goto l31
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
			l31:
			l32:
				{
					position33, tokenIndex33 := position, tokenIndex
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('\t') {
							goto l33
						}
						position++
					}
				l34:
					goto l32
				l33:
					position, tokenIndex = position33, tokenIndex33
				}
				if buffer[position] != rune('\n') {
					goto l22
				}
				position++
				add(ruleStatement, position23)
			}
			memoize(2, position22, tokenIndex22, true)
			return true
		l22:
			memoize(2, position22, tokenIndex22, false)
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 3 Instruction <- <(Identifier (' ' / '\t')* Arguments?)> */
		func() bool {
			if memoized, ok := memoization[memoKey{3, position}]; ok {
				return memoizedResult(memoized)
			}
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleIdentifier]() {
					goto l36
				}
			l38:
				{
					position39, tokenIndex39 := position, tokenIndex
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('\t') {
							goto l39
						}
						position++
					}
				l40:
					goto l38
				l39:
					position, tokenIndex = position39, tokenIndex39
				}
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleArguments]() {
						goto l42
					}
					goto l43
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
			l43:
				add(ruleInstruction, position37)
			}
			memoize(3, position36, tokenIndex36, true)
			return true
		l36:
			memoize(3, position36, tokenIndex36, false)
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 4 Label <- <(Identifier ':' (' ' / '\t')*)> */
		func() bool {
			if memoized, ok := memoization[memoKey{4, position}]; ok {
				return memoizedResult(memoized)
			}
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleIdentifier]() {
					goto l44
				}
				if buffer[position] != rune(':') {
					goto l44
				}
				position++
			l46:
				{
					position47, tokenIndex47 := position, tokenIndex
					{
						position48, tokenIndex48 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l49
						}
						position++
						goto l48
					l49:
						position, tokenIndex = position48, tokenIndex48
						if buffer[position] != rune('\t') {
							goto l47
						}
						position++
					}
				l48:
					goto l46
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
				add(ruleLabel, position45)
			}
			memoize(4, position44, tokenIndex44, true)
			return true
		l44:
			memoize(4, position44, tokenIndex44, false)
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 5 Arguments <- <((Argument ',' (' ' / '\t')*)* Argument)> */
		func() bool {
			if memoized, ok := memoization[memoKey{5, position}]; ok {
				return memoizedResult(memoized)
			}
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
			l52:
				{
					position53, tokenIndex53 := position, tokenIndex
					if !_rules[ruleArgument]() {
						goto l53
					}
					if buffer[position] != rune(',') {
						goto l53
					}
					position++
				l54:
					{
						position55, tokenIndex55 := position, tokenIndex
						{
							position56, tokenIndex56 := position, tokenIndex
							if buffer[position] != rune(' ') {
								goto l57
							}
							position++
							goto l56
						l57:
							position, tokenIndex = position56, tokenIndex56
							if buffer[position] != rune('\t') {
								goto l55
							}
							position++
						}
					l56:
						goto l54
					l55:
						position, tokenIndex = position55, tokenIndex55
					}
					goto l52
				l53:
					position, tokenIndex = position53, tokenIndex53
				}
				if !_rules[ruleArgument]() {
					goto l50
				}
				add(ruleArguments, position51)
			}
			memoize(5, position50, tokenIndex50, true)
			return true
		l50:
			memoize(5, position50, tokenIndex50, false)
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 6 Argument <- <(Register / Immediate / Identifier)> */
		func() bool {
			if memoized, ok := memoization[memoKey{6, position}]; ok {
				return memoizedResult(memoized)
			}
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				{
					position60, tokenIndex60 := position, tokenIndex
					if !_rules[ruleRegister]() {
						goto l61
					}
					goto l60
				l61:
					position, tokenIndex = position60, tokenIndex60
					if !_rules[ruleImmediate]() {
						goto l62
					}
					goto l60
				l62:
					position, tokenIndex = position60, tokenIndex60
					if !_rules[ruleIdentifier]() {
						goto l58
					}
				}
			l60:
				add(ruleArgument, position59)
			}
			memoize(6, position58, tokenIndex58, true)
			return true
		l58:
			memoize(6, position58, tokenIndex58, false)
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 7 Register <- <('$' Identifier)> */
		func() bool {
			if memoized, ok := memoization[memoKey{7, position}]; ok {
				return memoizedResult(memoized)
			}
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune('$') {
					goto l63
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l63
				}
				add(ruleRegister, position64)
			}
			memoize(7, position63, tokenIndex63, true)
			return true
		l63:
			memoize(7, position63, tokenIndex63, false)
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 8 Immediate <- <(HexNumber / DecimalNumber)> */
		func() bool {
			if memoized, ok := memoization[memoKey{8, position}]; ok {
				return memoizedResult(memoized)
			}
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[ruleHexNumber]() {
						goto l68
					}
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if !_rules[ruleDecimalNumber]() {
						goto l65
					}
				}
			l67:
				add(ruleImmediate, position66)
			}
			memoize(8, position65, tokenIndex65, true)
			return true
		l65:
			memoize(8, position65, tokenIndex65, false)
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 9 HexNumber <- <('0' 'x' ([0-9] / ([a-f] / [A-F]))+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{9, position}]; ok {
				return memoizedResult(memoized)
			}
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if buffer[position] != rune('0') {
					goto l69
				}
				position++
				if buffer[position] != rune('x') {
					goto l69
				}
				position++
				{
					position73, tokenIndex73 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l74
					}
					position++
					goto l73
				l74:
					position, tokenIndex = position73, tokenIndex73
					{
						position75, tokenIndex75 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l76
						}
						position++
						goto l75
					l76:
						position, tokenIndex = position75, tokenIndex75
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l69
						}
						position++
					}
				l75:
				}
			l73:
			l71:
				{
					position72, tokenIndex72 := position, tokenIndex
					{
						position77, tokenIndex77 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l78
						}
						position++
						goto l77
					l78:
						position, tokenIndex = position77, tokenIndex77
						{
							position79, tokenIndex79 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('f') {
								goto l80
							}
							position++
							goto l79
						l80:
							position, tokenIndex = position79, tokenIndex79
							if c := buffer[position]; c < rune('A') || c > rune('F') {
								goto l72
							}
							position++
						}
					l79:
					}
				l77:
					goto l71
				l72:
					position, tokenIndex = position72, tokenIndex72
				}
				add(ruleHexNumber, position70)
			}
			memoize(9, position69, tokenIndex69, true)
			return true
		l69:
			memoize(9, position69, tokenIndex69, false)
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 10 DecimalNumber <- <[0-9]+> */
		func() bool {
			if memoized, ok := memoization[memoKey{10, position}]; ok {
				return memoizedResult(memoized)
			}
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l81
				}
				position++
			l83:
				{
					position84, tokenIndex84 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l84
					}
					position++
					goto l83
				l84:
					position, tokenIndex = position84, tokenIndex84
				}
				add(ruleDecimalNumber, position82)
			}
			memoize(10, position81, tokenIndex81, true)
			return true
		l81:
			memoize(10, position81, tokenIndex81, false)
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 11 EOF <- <!.> */
		func() bool {
			if memoized, ok := memoization[memoKey{11, position}]; ok {
				return memoizedResult(memoized)
			}
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					if !matchDot() {
						goto l87
					}
					goto l85
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				add(ruleEOF, position86)
			}
			memoize(11, position85, tokenIndex85, true)
			return true
		l85:
			memoize(11, position85, tokenIndex85, false)
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 12 Identifier <- <(IdentStart CChar+)> */
		func() bool {
			if memoized, ok := memoization[memoKey{12, position}]; ok {
				return memoizedResult(memoized)
			}
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if !_rules[ruleIdentStart]() {
					goto l88
				}
				if !_rules[ruleCChar]() {
					goto l88
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleCChar]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				add(ruleIdentifier, position89)
			}
			memoize(12, position88, tokenIndex88, true)
			return true
		l88:
			memoize(12, position88, tokenIndex88, false)
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 13 IdentStart <- <([a-z] / [A-Z] / '_')> */
		func() bool {
			if memoized, ok := memoization[memoKey{13, position}]; ok {
				return memoizedResult(memoized)
			}
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l96
					}
					position++
					goto l94
				l96:
					position, tokenIndex = position94, tokenIndex94
					if buffer[position] != rune('_') {
						goto l92
					}
					position++
				}
			l94:
				add(ruleIdentStart, position93)
			}
			memoize(13, position92, tokenIndex92, true)
			return true
		l92:
			memoize(13, position92, tokenIndex92, false)
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 14 CChar <- <([a-z] / [A-Z] / '_' / [0-9])> */
		func() bool {
			if memoized, ok := memoization[memoKey{14, position}]; ok {
				return memoizedResult(memoized)
			}
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l100
					}
					position++
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l101
					}
					position++
					goto l99
				l101:
					position, tokenIndex = position99, tokenIndex99
					if buffer[position] != rune('_') {
						goto l102
					}
					position++
					goto l99
				l102:
					position, tokenIndex = position99, tokenIndex99
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l97
					}
					position++
				}
			l99:
				add(ruleCChar, position98)
			}
			memoize(14, position97, tokenIndex97, true)
			return true
		l97:
			memoize(14, position97, tokenIndex97, false)
			position, tokenIndex = position97, tokenIndex97
			return false
		},
	}
	p.rules = _rules
	return nil
}
